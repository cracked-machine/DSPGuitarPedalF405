/*
 * StateMachine.cpp
 *
 *  Created on: Apr 12, 2021
 *      Author: chris
 */

#include "StateMachine.hpp"
#include "AbstractState.hpp"

#include "FxDisabledState.hpp"
#include "FxEnabledState.hpp"

// create all system states at startup, they are not deleted.
std::array<AbstractState*, MAX_NUM_STATE> theStateList = {
	new FxDisabledState(),
	new FxEnabledState()
};

// The system state machine
StateMachine::StateMachine()
{
	states_list = {0};
	state = NULL;

	// instantiate the state objects now at init for the duration
	if(theStateList.size() == states_list.size())
		states_list = theStateList;

	state = states_list[StateMachine::FX_DISABLED];

	debounceTim14.start();
}


AbstractState * StateMachine::getState()
{
	return state;
}


void StateMachine::evFootswitchA()
{
	if(debounceTim14.check_debounce())
		state->evFootswitchA(this);
}

void StateMachine::evFootswitchB()
{
	if(debounceTim14.check_debounce())
		state->evFootswitchB(this);
}

void StateMachine::evUserSwitchA()
{
	if(debounceTim14.check_debounce())
		state->evUserSwitchA(this);
}

void StateMachine::evUserSwitchB()
{
	if(debounceTim14.check_debounce())
		state->evUserSwitchB(this);
}

void StateMachine::evRotaryEncoderA()
{
	if(debounceTim14.check_debounce())
		state->evRotaryEncoderA(this);
}

void StateMachine::evRotaryEncoderB()
{
	if(debounceTim14.check_debounce())
		state->evRotaryEncoderB(this);
}




