
#include <vector>
#include <iostream>

class BoundedVector
{
public:
	BoundedVector(size_t max_size);
	bool push_back(int pItem);
private:
	size_t capacity;
	std::vector<int> v1;
};

BoundedVector::BoundedVector(size_t max_size)
{
	v1.reserve(max_size);
	std::cout << "Capacity is now :" << v1.size() << "of " << v1.capacity() << std::endl;
	capacity = max_size;
}

bool BoundedVector::push_back(int pItem)
{
	if(v1.size() < capacity)
	{
		v1.push_back(pItem);
		std::cout << "Capacity is now :" << v1.size() << "of " << v1.capacity() << std::endl;

		return true;
	}
	else
	{
		return false;
	}

}

int main()
{
	BoundedVector *bv1 = new BoundedVector(10);
	for(int i=0; i < 20; i++)
	{
		std::cout << "Push back was " << bv1->push_back(i) << std::endl;
	}
	return 1;
}
