/*
 * FreeRTOS_Tasks.c
 *
 *  Created on: 14 Apr 2021
 *      Author: chris
 */

#include <FreeRTOS_UserTasks.hpp>

#include <iostream>
//#include <app_main.hpp>

#include <EventMachine.hpp>

#include "FreeRTOS.h"
#include "task.h"

#define STACK_SIZE 200
TaskHandle_t xHandle = NULL;

StaticTask_t xTaskBuffer;
StackType_t xStack[ STACK_SIZE ];

// create state machine instance
EventMachine em;

void initRTOS()
{
	/* Create the task without using any dynamic memory allocation. */
	xHandle = xTaskCreateStatic(
		vTaskCode,       /* Function that implements the task. */
		"NAME",          /* Text name for the task. */
		STACK_SIZE,      /* Number of indexes in the xStack array. */
		( void * ) 1,    /* Parameter passed into the task. */
		tskIDLE_PRIORITY,/* Priority at which the task is created. */
		xStack,          /* Array to use as the task's stack. */
		&xTaskBuffer );  /* Variable to hold the task's data structure. */


	vTaskStartScheduler();
}

/* Function that implements the task being created. */
void vTaskCode( void * pvParameters )
{
	/* The parameter value is expected to be 1 as 1 is passed in the
	pvParameters value in the call to xTaskCreateStatic(). */
	configASSERT( ( uint32_t ) pvParameters == 1UL );

	while(1)
	{
		std::cout << "Suspending vTaskCode" << std::endl;
		vTaskSuspend(NULL);
		std::cout << "Running vTaskCode" << std::endl;


			if((EXTI->PR & EXTI_PR_PR13_Msk) == EXTI_PR_PR13_Msk)
			{
				em.evFootswitchA();
			}
			if((EXTI->PR & EXTI_PR_PR14_Msk) == EXTI_PR_PR14_Msk)
			{
				em.evFootswitchB();
			}


		/* Task code goes here. */

		// clear the EXTI pending bit
		//EXTI->PR &= ~((EXTI_PR_PR0_Pos));
	}
}


void extiResumeTask()
{
	BaseType_t checkIfYieldRequired;
	checkIfYieldRequired = xTaskResumeFromISR(xHandle);
	portYIELD_FROM_ISR(checkIfYieldRequired);
}



