
#include <vector>
#include <iostream>

template<class T>
class BoundedVector
{
public:
	BoundedVector(size_t max_size);
	bool push_back(T pItem);
private:
	size_t capacity;
	std::vector<T> v1;
};

template<class T>
BoundedVector<T>::BoundedVector(size_t max_size)
{
	v1.reserve(max_size);
	std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;
	capacity = max_size;
}

template<class T>
bool BoundedVector<T>::push_back(T pItem)
{
	if(v1.size() < capacity)
	{
		v1.push_back(pItem);
		std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

		return true;
	}
	else
	{
		std::cout << "Vector is full" << std::endl;
		return false;
	}

}

int main()
{
//	typedef BoundedVector<int> IntBoundedVector;
//	IntBoundedVector *bv1 = new IntBoundedVector(10);
	typedef BoundedVector<float> IntBoundedVector;
	IntBoundedVector *bv1 = new IntBoundedVector(10);

	for(float i=0; i < 20; i++)
	{
		switch(bv1->push_back(i))
		{
			case true:
				std::cout << "Push back succeeded." << std::endl;
				break;
			case false:
				std::cout << "Push back failed." << std::endl;
				break;
		}

	}
	return 1;
}
