/*
 * StaticIIRCombFilter.cpp
 *
 *  Created on: Apr 23, 2021
 *      Author: chris
 */


#include <StaticIIRCombFilter.hpp>


/*
 * 		StaticIIRCombFilter2
 */

StaticIIRCombFilter1::StaticIIRCombFilter1()
{

	buffer = new (std::nothrow)  IIRCombFilterBuffer(pSize);

	buffer->iterator = buffer->begin();
	gain = pGain;
	limit = pTime * pSize;
}

StaticIIRCombFilter1::~StaticIIRCombFilter1()
{

}

void StaticIIRCombFilter1::zeroBuffer()
{
	//this->zeroBuffer();
	buffer->iterator = buffer->begin();
}

float StaticIIRCombFilter1::processSample(float pSampleIn)
{
	float Xn = pSampleIn;

	float readback = *(buffer->iterator);

	float tmp = Xn + (gain * readback);

	*(buffer->iterator) = tmp;
	buffer->iterator++;

	if (buffer->iterator >= buffer->end())
		buffer->iterator = buffer->begin();
	return readback;
}

StaticIIRCombFilter2::StaticIIRCombFilter2()
{

	buffer = new (std::nothrow)  IIRCombFilterBuffer(pSize);

	buffer->iterator = buffer->begin();
	gain = pGain;
	limit = pTime * pSize;
}

StaticIIRCombFilter2::~StaticIIRCombFilter2()
{

}


/*
 * 		StaticIIRCombFilter3
 */

void StaticIIRCombFilter2::zeroBuffer()
{
	//this->zeroBuffer();
	buffer->iterator = buffer->begin();
}

float StaticIIRCombFilter2::processSample(float pSampleIn)
{
	float Xn = pSampleIn;

	float readback = *(buffer->iterator);

	float tmp = Xn + (gain * readback);

	*(buffer->iterator) = tmp;
	buffer->iterator++;

	if (buffer->iterator >= buffer->end())
		buffer->iterator = buffer->begin();
	return readback;
}

StaticIIRCombFilter3::StaticIIRCombFilter3()
{

	buffer = new (std::nothrow)  IIRCombFilterBuffer(pSize);

	buffer->iterator = buffer->begin();
	gain = pGain;
	limit = pTime * pSize;
}

StaticIIRCombFilter3::~StaticIIRCombFilter3()
{

}

/*
 * 		StaticIIRCombFilter4
 */


void StaticIIRCombFilter3::zeroBuffer()
{
	//this->zeroBuffer();
	buffer->iterator = buffer->begin();
}

float StaticIIRCombFilter3::processSample(float pSampleIn)
{
	float Xn = pSampleIn;

	float readback = *(buffer->iterator);

	float tmp = Xn + (gain * readback);

	*(buffer->iterator) = tmp;
	buffer->iterator++;

	if (buffer->iterator >= buffer->end())
		buffer->iterator = buffer->begin();
	return readback;
}



StaticIIRCombFilter4::StaticIIRCombFilter4()
{

	buffer = new (std::nothrow)  IIRCombFilterBuffer(pSize);

	buffer->iterator = buffer->begin();
	gain = pGain;
	limit = pTime * pSize;
}

StaticIIRCombFilter4::~StaticIIRCombFilter4()
{

}


void StaticIIRCombFilter4::zeroBuffer()
{
	//this->zeroBuffer();
	buffer->iterator = buffer->begin();
}

float StaticIIRCombFilter4::processSample(float pSampleIn)
{
	float Xn = pSampleIn;

	float readback = *(buffer->iterator);

	float tmp = Xn + (gain * readback);

	*(buffer->iterator) = tmp;
	buffer->iterator++;

	if (buffer->iterator >= buffer->end())
		buffer->iterator = buffer->begin();
	return readback;
}

