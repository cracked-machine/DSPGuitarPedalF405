/*
 * AbstractState.hpp
 *
 *  Created on: Apr 12, 2021
 *      Author: chris
 */

#pragma once
#include <ExtCtrlStateMachine.hpp>

// include the GPIO user labels generated by Cube (if we're building for target)
#ifdef USE_HAL_DRIVER
	#include "main.h"
#endif


#include <stdint.h>

//class EventMachine;
class ExtCtrlStateMachine;


class AbstractState
{

public:
/*
	virtual void evFootswitchA(EventMachine *machine) = 0 ;
	virtual void evFootswitchB(EventMachine *machine) = 0;
	virtual void evUserSwitchA(EventMachine *machine) = 0;
	virtual void evUserSwitchB(EventMachine *machine) = 0;
	virtual void evRotaryEncoderA(EventMachine *machine) = 0;
	virtual void evRotaryEncoderB(EventMachine *machine) = 0;
*/
	virtual void evFootswitchA(ExtCtrlStateMachine *machine) = 0 ;
	virtual void evFootswitchB(ExtCtrlStateMachine *machine) = 0;
	virtual void evUserSwitchA(ExtCtrlStateMachine *machine) = 0;
	virtual void evUserSwitchB(ExtCtrlStateMachine *machine) = 0;
	virtual void evRotaryEncoderA(ExtCtrlStateMachine *machine) = 0;
	virtual void evRotaryEncoderB(ExtCtrlStateMachine *machine) = 0;

	virtual ~AbstractState();

protected:

	void setState(AbstractStateMachine *machine, AbstractState *st);

};






