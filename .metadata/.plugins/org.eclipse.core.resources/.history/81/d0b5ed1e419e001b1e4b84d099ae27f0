/*
 * ISRTaskManager.cpp
 *
 *  Created on: Apr 14, 2021
 *      Author: chris
 */

#include <ISRTaskManager.hpp>
#include <iostream>


void ISRTaskCode( void * parm );

static StaticQueue_t ISRStaticQueue;



ISRTaskManager::ISRTaskManager()
{
	ISRTaskHandle = NULL;

}

EventMachine* ISRTaskManager::getIsrEventMan()
{
	return ISREventMan;
}

void ISRTaskManager::initEventMachine()
{
	ISREventMan = new EventMachine();
}

void ISRTaskManager::initIsrTask()
{
	// Create the task without using any dynamic memory allocation.
	ISRTaskHandle = xTaskCreateStatic(
		ISRTaskCode,       		// global function in ISRTaskManager
		"IRSTaskMan",          	// Text name for the task.
		200,      				// Number of indexes in the ISRTaskStack array.
		this,    				// pointer to this class instance (used by "IRSTaskMan" to access class members)
		tskIDLE_PRIORITY,		// Priority at which the task is created.
		ISRTaskStack,           // Array to use as the task's stack.
		&ISRTaskBuffer );  		// Variable to hold the task's data structure.

}

void ISRTaskManager::initIsrQueue()
{
	/* Create a queue capable of containing 10 uint64_t values. */
	ISRQueue = ISRQueueCreateStatic(
		1,						// QUEUE_SIZE
		sizeof(uint16_t),		// ITEM_SIZE
		ISRQueueStorageArea,	// total queue storage size (QUEUE_SIZE * ITEM_SIZE)
		&ISRStaticQueue );		// Queue data structure
}

TaskHandle_t ISRTaskManager::getIsrTask()
{
	return this->ISRTaskHandle;
}

QueueHandle_t ISRTaskManager::getQueue()
{
	return this->ISRQueue;
}

void ISRTaskManager::ISRQueueSendFromISR_wrapper(uint16_t item)
{

	ISRQueueSendFromISR(ISRQueue, &item, NULL);
}

/* Function that implements the task being created. */
void ISRTaskCode( void * parm )
{
	ISRTaskManager *isr_taskman = static_cast<ISRTaskManager*>(parm);
	while(1)
	{
		uint16_t item = 0;
		//std::cout << "ISRTaskCode waiting for queue item" << std::endl;

		if( ISRQueueReceive( isr_taskman->getQueue(), &( item ), ( TickType_t ) 10 ) == pdPASS)
		{
			//std::cout << "ISRTaskCode retrieved queue item" << std::endl;
			switch(item)
			{
				case EXTI_PR_PR13:
					isr_taskman->getIsrEventMan()->evFootswitchA();
					break;
				case EXTI_PR_PR14:
					isr_taskman->getIsrEventMan()->evFootswitchB();
					break;
			}
		}
	}
}

