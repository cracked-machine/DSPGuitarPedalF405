/*
 * ResourceManager.hpp
 *
 *  Created on: 20 Apr 2021
 *      Author: chris
 */

#ifndef RESOURCEMANAGER_RESOURCEMANAGER_HPP_
#define RESOURCEMANAGER_RESOURCEMANAGER_HPP_

#include <stdint.h>
#include <cstddef>
#include <type_traits>
#include <iostream>

#ifndef DISABLE_ERROR_HANDLER
#define FOREVER 1
#else
#define FOREVER 0
#endif

class ResourceManager
{

public:
	template<typename T>
		static bool checkSystemMem(std::size_t pSize);

	template< typename T>
	    static double foo(  ){ std::cout << "hello";  return 1.0;};

	static uint32_t getUsedMem();
	static uint32_t getTotalMem();
	static uint32_t getThresholdMem();

private:
	static uint32_t usedMem;
	static const uint32_t totalMem = 128000;
	static const uint32_t thresholdMem = (ResourceManager::totalMem - 10000);
};

template<class T>
std::size_t get_number_bytes()
{
  //return (bytes - ((!std::is_trivially_destructible<T>::value)*sizeof(void*))) / sizeof(T);
	return sizeof(T);
}





#endif /* RESOURCEMANAGER_RESOURCEMANAGER_HPP_ */
