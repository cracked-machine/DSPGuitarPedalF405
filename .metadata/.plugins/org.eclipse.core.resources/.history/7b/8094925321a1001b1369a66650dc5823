/*
 * test_taskman.cpp
 *
 *  Created on: 19 Apr 2021
 *      Author: chris
 */




#include "CppUTest/TestHarness.h"
#include <BaseTaskManager.hpp>

#include <test_hal_testenv.h>

#include <task.h>

// FreeRTOS stub functions

TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
								const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const uint32_t ulStackDepth,
								void * const pvParameters,
								UBaseType_t uxPriority,
								StackType_t * const puISRTaskStackBuffer,
								StaticTask_t * const pISRTaskBuffer )
{
	// we don't test the return value so we don't care if its null
	return nullptr;
}

QueueHandle_t ISRQueueGenericCreateStatic( const UBaseType_t uISRQueueLength,
                                          const UBaseType_t uxItemSize,
                                          uint8_t * pucQueueStorage,
                                          StaticQueue_t * pxStaticQueue,
                                          const uint8_t ucQueueType )
 {
	// we don't test the return value so we don't care if its null
	return nullptr;
 }

// Tests

TEST_GROUP(TaskManGroup)
{
	void setup()
	{

	}

	void teardown()
	{

	}
};


TEST(TaskManGroup, TaskMan_ZeroTaskStackSizeTest)
{
	I2STaskManager_t *i2s_taskman = new  I2STaskManager_t(0, 1);

	CHECK_FALSE(i2s_taskman->getTask());
	delete i2s_taskman;
}

TEST(TaskManGroup, TaskMan_ZeroQueueSizeTest)
{
	I2STaskManager_t *i2s_taskman = new  I2STaskManager_t(200, 0);

	CHECK_FALSE(i2s_taskman->getQueue());
	delete i2s_taskman;
}

TEST(TaskManGroup, TaskMan_ZeroQueueAndStackSizeTest)
{
	I2STaskManager_t *i2s_taskman = new  I2STaskManager_t(0, 0);

	CHECK_FALSE(i2s_taskman->getQueue());
	delete i2s_taskman;
}

TEST(TaskManGroup, TaskMan_SetTaskTest)
{
	I2STaskManager_t *i2s_taskman = new  I2STaskManager_t(200, 1);
	i2s_taskman->setTask("", nullptr);
	CHECK_FALSE(i2s_taskman->getTask());
	delete i2s_taskman;
}

TEST(TaskManGroup, TaskMan_SetQueueTest)
{
	I2STaskManager_t *i2s_taskman = new  I2STaskManager_t(200, 1);
	i2s_taskman->setQueue(nullptr);
	CHECK_FALSE(i2s_taskman->getTask());
	delete i2s_taskman;
}

TEST(TaskManGroup, TaskMan_BlankTest)
{
	CHECK(true);
}


