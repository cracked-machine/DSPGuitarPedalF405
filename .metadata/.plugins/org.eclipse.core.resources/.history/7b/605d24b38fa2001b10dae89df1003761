/*
 * ResourceManager.cpp
 *
 *  Created on: 20 Apr 2021
 *      Author: chris
 */


#include <ResourceManager.hpp>
#include <new>
#include <iostream>

void badMemAllochandler();

//uint32_t usedmem = 0;
//const uint32_t totalmem = 128000;
//uint32_t maxthresholdmem = 80000;

uint32_t ResourceManager::usedMem = 0;

template< typename T>
double ResourceManager::foo( ){ std::cout << "hello";  return 1.0;}

template< typename T>
bool ResourceManager::checkSystemMem()
{
  //return (bytes - ((!std::is_trivially_destructible<T>::value)*sizeof(void*))) / sizeof(T);
	std::cout << sizeof(T) << std::endl;
	return true;
}


uint32_t ResourceManager::getUsedMem()
{
	return usedMem;
}

uint32_t ResourceManager::getTotalMem()
{
	return totalMem;
}

uint32_t ResourceManager::getThresholdMem()
{
	return thresholdMem;
}

void initResourceManager()
{
	std::set_new_handler(badMemAllochandler);
}
#ifndef ENABLE_CPPUTEST
void* operator new(size_t size)
{
    std::cout << "Overloading new operator with size: " << size << std::endl;
	//void * p = ::operator new(size);
	void * p = malloc(size); //will also work fine
	//ResourceManager::checkSystemMem(size);
	return p;
}

void operator delete(void*)
{
	return;
}
#endif

void badMemAllochandler()
{
    std::cout << "Memory allocation failed, terminating\n";
    std::set_new_handler(nullptr);
    while(FOREVER)
    {
    	// spin
    }
}

