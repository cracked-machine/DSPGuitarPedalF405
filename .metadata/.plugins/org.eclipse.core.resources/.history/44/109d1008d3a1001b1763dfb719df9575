/*
 * BoundedVector.hpp
 *
 *  Created on: Apr 20, 2021
 *      Author: chris
 */

#ifndef RESOURCEMANAGER_BOUNDEDVECTOR_HPP_
#define RESOURCEMANAGER_BOUNDEDVECTOR_HPP_


template<class T>
class BoundedVector
{
public:
	BoundedVector(size_t max_size);
	bool push_back(T pItem);
private:
	size_t capacity;
	std::vector<T> v1;
};

template<class T>
BoundedVector<T>::BoundedVector(size_t pCapacity)
{
	this->capacity = pCapacity;
	v1.reserve(this->capacity);
	std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

}

template<class T>
bool BoundedVector<T>::push_back(T pItem)
{
	if(v1.size() < capacity)
	{
		v1.push_back(pItem);
		std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

		return true;
	}
	else
	{
		std::cout << "Vector is full" << std::endl;
		return false;
	}

}


#endif /* RESOURCEMANAGER_BOUNDEDVECTOR_HPP_ */
