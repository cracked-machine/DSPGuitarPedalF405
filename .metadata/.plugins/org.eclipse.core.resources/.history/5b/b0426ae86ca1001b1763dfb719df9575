#include <memory>
#include <iostream>
#include <vector>
namespace my_allocator_namespace
{
    template <typename T>
    class my_allocator: public std::allocator<T>
    {
    public:

        int capacity_limit = 10;



        pointer allocate(size_type n, const void *hint=0)
        {
        	std::cout << capacity_limit;
            if( n  > capacity_limit ) {
                return std::allocator<T>::allocate(capacity_limit );
            }
            return std::allocator<T>::allocate(n, hint);
        }

        void deallocate(pointer p, size_type n)
        {
            return std::allocator<T>::deallocate(p, n);
        }


    };
}
using namespace std;
using namespace my_allocator_namespace;
int main()
{
	vector<int, my_allocator<int> > int_vec(10);
    for(int i = 0 ;i < 20; i++)
    {
        std::cerr << i << "," << int_vec.size() << std::endl;
        int_vec.push_back(i);
    }
}
