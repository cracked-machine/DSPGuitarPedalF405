/*
 * ResourceManager.hpp
 *
 *  Created on: 20 Apr 2021
 *      Author: chris
 */

#ifndef RESOURCEMANAGER_RESOURCEMANAGER_HPP_
#define RESOURCEMANAGER_RESOURCEMANAGER_HPP_

#include <stdint.h>
#include <cstddef>
#include <type_traits>
#include <iostream>
#include <new>

#ifndef DISABLE_ERROR_HANDLER
#define FOREVER 1
#else
#define FOREVER 0
#endif

class ResourceManager
{

public:

	/*
	 * check the system has memory left before it ius allocated
	 * (called by class-level overloaded 'operator new(std::nothrow)')
	 */
	template<typename T>
	static bool checkSystemMem(std::size_t pSize)
	{
	  //return (bytes - ((!std::is_trivially_destructible<T>::value)*sizeof(void*))) / sizeof(T);
		uint32_t requestedSize = sizeof(T) * pSize;
		if(ResourceManager::usedMem + requestedSize > ResourceManager::thresholdMem)
		{
			std::cout << "Requested memory, " << requestedSize << "bytes, is not available" << std::endl;
			return false;
		}
		else
		{
			ResourceManager::usedMem += requestedSize;
			std::cout << "Allocating " << requestedSize << " bytes. System total = " << ResourceManager::usedMem << " bytes." << std::endl;
			return true;
		}

	}

	static bool checkSystemMem(std::size_t pSize)
	{
	  //return (bytes - ((!std::is_trivially_destructible<T>::value)*sizeof(void*))) / sizeof(T);
		uint32_t requestedSize = sizeof(T) * pSize;
		if(ResourceManager::usedMem + requestedSize > ResourceManager::thresholdMem)
		{
			std::cout << "Requested memory, " << requestedSize << "bytes, is not available" << std::endl;
			return false;
		}
		else
		{
			ResourceManager::usedMem += requestedSize;
			std::cout << "Allocating " << requestedSize << " bytes. System total = " << ResourceManager::usedMem << " bytes." << std::endl;
			return true;
		}

	}


	template< typename T>
	static double foo(  )
	{ std::cout << "hello";  return 1.0;}

	static uint32_t getUsedMem();
	static uint32_t getTotalMem();
	static uint32_t getThresholdMem();

private:
	static uint32_t usedMem;
	static const uint32_t totalMem = 128000;
	static const uint32_t thresholdMem = (ResourceManager::totalMem - 10000);
};






#endif /* RESOURCEMANAGER_RESOURCEMANAGER_HPP_ */
