/*
 * AbstractTaskManager.hpp
 *
 *  Created on: Apr 16, 2021
 *      Author: chris
 */

#ifndef FREERTOS_ABSTRACTTASKMANAGER_HPP_
#define FREERTOS_ABSTRACTTASKMANAGER_HPP_

// FreeRTOS
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

template<class T>
class AbstractTaskManager
{
public:
	AbstractTaskManager()
	{
		theTaskHandle = NULL;
	}

	void initTask();
	void initQueue();

	TaskHandle_t getTask();
	QueueHandle_t getQueue();

	void queueSendFromISR_wrapper(T item);

private:
	// static RTOS task
	TaskHandle_t theTaskHandle;
	StaticTask_t theTaskBuffer;
	StackType_t theTaskStack[ 200 ];

	// static RTOS queue for ISR-to-task comm
	uint8_t theQueueStorageArea[ 1 * sizeof( T ) ];
	QueueHandle_t theQueue;
};

template<class T>
void AbstractTaskManager<T>::initTask(char* _taskname)
{
	// Create the task without using any dynamic memory allocation.

}

typedef AbstractTaskManager<uint8_t> I2STaskManager_t;
typedef AbstractTaskManager<uint16_t> ExtCtrlManager_t;


#endif /* FREERTOS_ABSTRACTTASKMANAGER_HPP_ */
