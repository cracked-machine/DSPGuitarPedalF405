/*
 * FreeRTOS_Tasks.c
 *
 *  Created on: 14 Apr 2021
 *      Author: chris
 */

#include <FreeRTOS_UserTasks.hpp>

#include <iostream>

	#include <EventMachine.hpp>
	#include <Debounce.hpp>

	// create instance of the debounce manager for HAL Timer (specifically TIM14)
	typedef DebounceManager<TIM_TypeDef> HALDebounceManager;
	HALDebounceManager debounceManagerTim14(TIM14, 100);

	// create state machine instance
	EventMachine em;

/* Function that implements the task being created. */
void vTaskCode( void * pvParameters )
{
	/* The parameter value is expected to be 1 as 1 is passed in the
	pvParameters value in the call to xTaskCreateStatic(). */
	configASSERT( ( uint32_t ) pvParameters == 1UL );

	while(1)
	{
		std::cout << "Suspending vTaskCode" << std::endl;
		vTaskSuspend(NULL);
		std::cout << "Running vTaskCode" << std::endl;
/*
		if(debounceManagerTim14.check_debounce())
		{
			switch(GPIO_Pin)
			{
				case GPIO_PIN_13:
					em.evFootswitchA();
					BaseType_t checkIfYieldRequired;
					checkIfYieldRequired = xTaskResumeFromISR(xHandle);
					portYIELD_FROM_ISR(checkIfYieldRequired);

					break;
				case GPIO_PIN_14:
					em.evFootswitchB();
					break;
			}
		}
*/
		/* Task code goes here. */

		// clear the EXTI pending bit
		//EXTI->PR &= ~((EXTI_PR_PR0_Pos));
	}
}
