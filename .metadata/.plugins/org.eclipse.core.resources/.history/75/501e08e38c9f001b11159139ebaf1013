/*
 * AbstractStateMachine.hpp
 *
 *  Created on: Apr 12, 2021
 *      Author: chris
 */

#ifndef INC_ABSTRACTSTATEMACHINE_HPP_
#define INC_ABSTRACTSTATEMACHINE_HPP_
#pragma once

#include <AbstractState.hpp>


#include <array>

#define MAX_NUM_STATE 2

#include <Debounce.hpp>


class AbstractState;

class AbstractStateMachine
{

	friend class AbstractState;

public:

	AbstractStateMachine();
/*
	void evFootswitchA();
	void evFootswitchB();
	void evUserSwitchA();
	void evUserSwitchB();
	void evRotaryEncoderA();
	void evRotaryEncoderB();
*/
	//std::array<AbstractState*, MAX_NUM_STATE> states_list;

	enum states_enum
	{
		FX_DISABLED,
		FX_ENABLED
	};

	AbstractState* getState();

private:

	AbstractState* state;
	//DebounceManager debounceTim14  = {DebounceManager(TIM14, 800)};

};


#endif /* INC_ABSTRACTSTATEMACHINE_HPP_ */
