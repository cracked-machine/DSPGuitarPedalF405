/*
 * EventMachine.cpp
 *
 *  Created on: Apr 12, 2021
 *      Author: chris
 */

#include "EventMachine.hpp"
#include "FxDisabledState.hpp"

EventMachine::EventMachine(std::array<AbstractState*, MAX_NUM_STATE> *pStates)
{
	// instantiate the state objects now at init for the duration
	if(pStates->size() == states_list.size())
	{
		states_list[EventMachine::FX_DISABLED] = (*pStates)[0];
		states_list[EventMachine::FX_ENABLED] = (*pStates)[1];
	}

	state = states_list[EventMachine::FX_DISABLED];

	//FxDisabledState newFxDisabledState;
	test = &newFxDisabledState;
	debounceTim14.start();
}


AbstractState * EventMachine::getState()
{
	return state;
}


void EventMachine::evFootswitchA()
{
	if(debounceTim14.check_debounce())
		state->evFootswitchA(this);
}

void EventMachine::evFootswitchB()
{
	if(debounceTim14.check_debounce())
		state->evFootswitchB(this);
}

void EventMachine::evUserSwitchA()
{
	if(debounceTim14.check_debounce())
		state->evUserSwitchA(this);
}

void EventMachine::evUserSwitchB()
{
	if(debounceTim14.check_debounce())
		state->evUserSwitchB(this);
}

void EventMachine::evRotaryEncoderA()
{
	if(debounceTim14.check_debounce())
		state->evRotaryEncoderA(this);
}

void EventMachine::evRotaryEncoderB()
{
	if(debounceTim14.check_debounce())
		state->evRotaryEncoderB(this);
}




