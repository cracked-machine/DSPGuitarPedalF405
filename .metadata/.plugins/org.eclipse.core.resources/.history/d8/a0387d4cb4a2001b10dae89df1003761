/*
 * Reverb.cpp
 *
 *  Created on: Apr 20, 2021
 *      Author: chris
 */

#include <Reverb.hpp>

BasicReverb::BasicReverb()
{
	combfilter1 = new(std::nothrow)  IIRCombFilter(3460 * 2, 0.805);
	combfilter2 = new(std::nothrow)  IIRCombFilter(2988 * 2, 0.827);
	combfilter3 = new(std::nothrow)  IIRCombFilter(3882 * 2, 0.783);
	combfilter4 = new(std::nothrow)  IIRCombFilter(4312 * 2, 0.764);
	combfilter5 = new(std::nothrow)  IIRCombFilter(2988 * 2, 0.827);
	combfilter6 = new(std::nothrow)  IIRCombFilter(2988 * 2, 0.827);
	allpass1 = new(std::nothrow)  UniCombFilter(	480  * 2, 0.7);
	allpass2 = new(std::nothrow)  UniCombFilter(	161  * 2, 0.7);
	allpass3 = new(std::nothrow)  UniCombFilter(	46   * 2, 0.7);
}

BasicReverb::~BasicReverb()
{

}

float BasicReverb::processSample(float pInput)
{
	float combs = 0.0f;
	float output = 0;
	if(combfilter1)	{
		combs++;
		output += combfilter1->processSample(pInput);
	}
	if(combfilter1)	{
		combs++;
		output += combfilter1->processSample(pInput);
	}
	if(combfilter1)	{
		combs++;
		output += combfilter1->processSample(pInput);
	}
	if(combfilter1)	{
		combs++;
		output += combfilter1->processSample(pInput);
	}
	output = output / combs;
	/*
	float output = (	combfilter1->processSample(pInput) +
						combfilter2->processSample(pInput) +
						combfilter3->processSample(pInput)// +
						//combfilter4->processSample(pInput)
						)
						/3.0f;
*/

	output = allpass1->processSample(output);
	output = allpass2->processSample(output);
	output = allpass3->processSample(output);
	return output;
}

void BasicReverb::process_half_u16(	StereoBlockU16< AbstractFx::FULL_BLK_SIZE_U16 > *pRxBuf,
									StereoBlockU16< AbstractFx::FULL_BLK_SIZE_U16 > *pTxBuf)
{

	for(size_t i = 0; i < pRxBuf->size(); i+=4)
	{
		int lSample = (int) ((*pRxBuf)[i+0]) << 16) | ((*pRxBuf)[i+1]);
		int rSample = (int) (pRxBuf[i+2] << 16) | pRxBuf[i+3];

		float sum = (float) (lSample + rSample);
		sum = (1.0f - wet ) * sum + wet * processSample(sum);

		lSample = (int) sum;
		rSample = lSample;

		//restore to buffer
		pTxBuf[i+0] = (lSample >> 16) & 0xFFFF;
		pTxBuf[i+1] = lSample & 0xFFFF;
		pTxBuf[i+2] = (rSample >> 16) & 0xFFFF;
		pTxBuf[i+3] = rSample & 0xFFFF;
	}
}

void BasicReverb::process_full_u16(	StereoBlockU16< AbstractFx::FULL_BLK_SIZE_U16 > *pRxBuf,
									StereoBlockU16< AbstractFx::FULL_BLK_SIZE_U16 > *pTxBuf)
{

	for(size_t i = 0; i < pRxBuf->size(); i+=4)
	{
		int lSample = (int) (pRxBuf[i+4] << 16) | pRxBuf[i+5];
		int rSample = (int) (pRxBuf[i+6] << 16) | pRxBuf[i+7];

		float sum = (float) (lSample + rSample);
		sum = (1.0f - wet) * sum + wet * this->processSample(sum);
		lSample = (int) sum;
		rSample = lSample;

		//restore to buffer
		pTxBuf[i+4] = (lSample >> 16) & 0xFFFF;
		pTxBuf[i+5] = lSample & 0xFFFF;
		pTxBuf[i+6] = (rSample >> 16) & 0xFFFF;
		pTxBuf[i+7] = rSample & 0xFFFF;
	}
}

