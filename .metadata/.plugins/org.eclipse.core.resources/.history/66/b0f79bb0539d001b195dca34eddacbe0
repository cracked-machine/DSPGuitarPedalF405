/*
 * RTOSTask.hpp
 *
 *  Created on: Apr 14, 2021
 *      Author: chris
 */

#ifndef FREERTOS_RTOSTASK_HPP_
#define FREERTOS_RTOSTASK_HPP_

#include "FreeRTOS.h"
#include "task.h"

class Thread
{
public:
	Thread( unsigned portSHORT _stackDepth, UBaseType_t _priority, const char* _name = "" )
	{
		xTaskCreate( task, _name, _stackDepth, this, _priority, &this->taskHandle );
	}

	virtual void Main() = 0;

protected:
	static void task( void* _params )
	{
		Thread* p = static_cast<Thread*>( _params );
		p->Main();
	}

	TaskHandle_t taskHandle;
};

class Led : public Thread
{
public:
	Led( unsigned portSHORT _stackDepth, UBaseType_t _priority, const char* _name,	// base class arguments
		uint8_t _port, uint8_t _pin, uint32_t _ticks ) :							// this class arguments
		Thread{ _stackDepth, _priority, _name },
		port{ _port }, pin{ _pin }, ticks{ _ticks }
	{
		//Chip_GPIO_SetPinDIROutput( LPC_GPIO, this->port, this->pin );
	}

	virtual void Main() override
	{
		while(1)
		{
			std::cout << "Suspending vTaskCode" << std::endl;
			vTaskSuspend(NULL);
			std::cout << "Running vTaskCode" << std::endl;

/*
				if(*thePin == FootSwitchA_IN_Pin)
				{
					std::cout << "Running EM" << std::endl;
					em->evFootswitchA();
				}
				if(*thePin == FootSwitchB_IN_Pin)
				{
					em->evFootswitchB();
				}
*/

		}
	}

private:
	uint8_t port;
	uint8_t pin;
	uint32_t ticks;
};


#endif /* FREERTOS_RTOSTASK_HPP_ */
