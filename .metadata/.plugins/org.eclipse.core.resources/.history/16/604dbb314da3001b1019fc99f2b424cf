/*
 * I2STaskManager.hpp
 *
 *  Created on: Apr 21, 2021
 *      Author: chris
 */

#ifndef TASKMANAGER_I2STASKMANAGER_HPP_
#define TASKMANAGER_I2STASKMANAGER_HPP_

#include <BaseTaskManager.hpp>

#ifdef USE_FREERTOS

	typedef BaseTaskManager<uint8_t, StateMachine> I2STaskManager_t;

#else

	typedef BaseTaskManager<uint8_t, StateMachine> I2STaskManager_t;


	class I2STaskManagerNoRTOS : public I2STaskManager_t
	{
	public:
		I2STaskManagerNoRTOS();
		~I2STaskManagerNoRTOS();

		/*
		 * check there is system memory available before allocation or return nullptr
		 */
		void* operator new(size_t size, const std::nothrow_t& tag) noexcept {
				if(ResourceManager::checkSystemMem< I2STaskManagerNoRTOS >(size))
					return malloc(size);
				else
					return nullptr;
		}


		void nonRtosTask(uint8_t pData);

		enum eI2STxRxCallbackStatus
		{
			Idle = 0,
			I2STxRxHalfCallback,
			I2STxRxCpltCallback
		};

		eI2STxRxCallbackStatus I2STxRxCallbackStatus = I2STaskManagerNoRTOS::Idle;

	private:



	};
#endif



#endif /* TASKMANAGER_I2STASKMANAGER_HPP_ */
