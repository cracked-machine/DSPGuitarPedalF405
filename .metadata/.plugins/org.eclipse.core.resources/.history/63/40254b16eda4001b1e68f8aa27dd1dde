/*
#include "test.hpp"
#include <vector>
#include <iostream>



template<class T>
class BoundedVector
{
public:
	BoundedVector(size_t max_size);
	bool push_back(T pItem);
private:
	size_t capacity;
	std::vector<T> v1;
};

template<class T>
BoundedVector<T>::BoundedVector(size_t max_size)
{
	v1.reserve(max_size);
	std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;
	capacity = max_size;
}

template<class T>
bool BoundedVector<T>::push_back(T pItem)
{
	if(v1.size() < capacity)
	{
		v1.push_back(pItem);
		std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

		return true;
	}
	else
	{
		std::cout << "Vector is full" << std::endl;
		return false;
	}

}

class Widget
{

};
*/

#include <IIRCombFilter.hpp>
#include <UniCombFilter.hpp>

int main()
{

/*
	typedef BoundedVector<Widget*> IntBoundedVector;
	IntBoundedVector *bv1 = new IntBoundedVector(10);

	for(int i=0; i < 20; i++)
	{
		switch(bv1->push_back(new Widget))
		{
			case true:
				std::cout << "Push back succeeded." << std::endl;
				break;
			case false:
				std::cout << "Push back failed." << std::endl;
				break;
		}

	}
	*/

	IIRCombFilter *combfilter1 = new IIRCombFilter(3460 * 2, 0.805);
	IIRCombFilter *combfilter2 = new IIRCombFilter(2988 * 2, 0.827);
	IIRCombFilter *combfilter3 = new IIRCombFilter(3882 * 2, 0.783);
	IIRCombFilter *combfilter4 = new IIRCombFilter(4312 * 2, 0.764);
	UniCombFilter *allpass1 = new UniCombFilter(   480  * 2, 0.7);
	UniCombFilter *allpass2 = new UniCombFilter(   161  * 2, 0.7);
	UniCombFilter *allpass3 = new UniCombFilter(   46   * 2, 0.7);
	return 1;
}
