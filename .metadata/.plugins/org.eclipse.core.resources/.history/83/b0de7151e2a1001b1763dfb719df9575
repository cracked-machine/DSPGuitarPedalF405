/*
 * BoundedVector.hpp
 *
 *  Created on: Apr 20, 2021
 *      Author: chris
 */

#ifndef RESOURCEMANAGER_BOUNDEDVECTOR_HPP_
#define RESOURCEMANAGER_BOUNDEDVECTOR_HPP_

#include <vector>
#include <iostream>

template<class T>
class BoundedVector
{
public:
	BoundedVector(size_t pCapacity_limit);
	bool push_back(T pItem);
	auto begin();

	typename std::vector<T>::iterator iterator;


private:
	size_t capacity_limit;
	std::vector<T> v1;


};

template<class T>
auto BoundedVector<T>::begin();

template<class T>
BoundedVector<T>::BoundedVector(size_t pCapacity_limit)
{
	this->capacity_limit = pCapacity_limit;
	v1.reserve(this->capacity_limit);
	std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

}

template<class T>
bool BoundedVector<T>::push_back(T pItem)
{
	if(v1.size() < this->capacity_limit)
	{
		v1.push_back(pItem);
		std::cout << "Vector size: " << v1.size() << " Capacity: " << v1.capacity() << std::endl;

		return true;
	}
	else
	{
		std::cout << "Vector is full" << std::endl;
		return false;
	}

}



#endif /* RESOURCEMANAGER_BOUNDEDVECTOR_HPP_ */
